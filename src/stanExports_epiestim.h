// Generated by rstantools.  Do not edit by hand.

/*
    epipredictr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    epipredictr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with epipredictr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_epiestim_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_epiestim");
    reader.add_event(67, 65, "end", "model_epiestim");
    return reader;
}
#include <stan_meta_header.hpp>
class model_epiestim : public prob_grad {
private:
        int t;
        std::vector<int> obs_inc;
        int tau;
        int num_pred;
        int neg_binom_model;
        std::vector<double> infectiousness;
        std::vector<double> w;
public:
    model_epiestim(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_epiestim(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_epiestim_namespace::model_epiestim";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "t", "int", context__.to_vec());
            t = int(0);
            vals_i__ = context__.vals_i("t");
            pos__ = 0;
            t = vals_i__[pos__++];
            current_statement_begin__ = 3;
            validate_non_negative_index("obs_inc", "t", t);
            context__.validate_dims("data initialization", "obs_inc", "int", context__.to_vec(t));
            obs_inc = std::vector<int>(t, int(0));
            vals_i__ = context__.vals_i("obs_inc");
            pos__ = 0;
            size_t obs_inc_k_0_max__ = t;
            for (size_t k_0__ = 0; k_0__ < obs_inc_k_0_max__; ++k_0__) {
                obs_inc[k_0__] = vals_i__[pos__++];
            }
            size_t obs_inc_i_0_max__ = t;
            for (size_t i_0__ = 0; i_0__ < obs_inc_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_inc[i_0__]", obs_inc[i_0__], 0);
            }
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "tau", "int", context__.to_vec());
            tau = int(0);
            vals_i__ = context__.vals_i("tau");
            pos__ = 0;
            tau = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "num_pred", "int", context__.to_vec());
            num_pred = int(0);
            vals_i__ = context__.vals_i("num_pred");
            pos__ = 0;
            num_pred = vals_i__[pos__++];
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "neg_binom_model", "int", context__.to_vec());
            neg_binom_model = int(0);
            vals_i__ = context__.vals_i("neg_binom_model");
            pos__ = 0;
            neg_binom_model = vals_i__[pos__++];
            check_greater_or_equal(function__, "neg_binom_model", neg_binom_model, 0);
            check_less_or_equal(function__, "neg_binom_model", neg_binom_model, 1);
            // initialize transformed data variables
            current_statement_begin__ = 11;
            validate_non_negative_index("infectiousness", "t", t);
            infectiousness = std::vector<double>(t, double(0));
            stan::math::fill(infectiousness, DUMMY_VAR__);
            current_statement_begin__ = 12;
            validate_non_negative_index("w", "((t + num_pred) - 1)", ((t + num_pred) - 1));
            w = std::vector<double>(((t + num_pred) - 1), double(0));
            stan::math::fill(w, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 13;
            stan::model::assign(infectiousness, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        0, 
                        "assigning variable infectiousness");
            current_statement_begin__ = 15;
            for (int i = 1; i <= ((t + num_pred) - 1); ++i) {
                current_statement_begin__ = 16;
                stan::model::assign(w, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (gamma_cdf((i + 0.5), 2.706556, 0.1768991) - gamma_cdf((i - 0.5), 2.706556, 0.1768991)), 
                            "assigning variable w");
            }
            current_statement_begin__ = 19;
            for (int s = 2; s <= t; ++s) {
                current_statement_begin__ = 20;
                stan::model::assign(infectiousness, 
                            stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable infectiousness");
                current_statement_begin__ = 21;
                for (int i = 1; i <= (s - 1); ++i) {
                    current_statement_begin__ = 22;
                    stan::model::assign(infectiousness, 
                                stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                (stan::model::rvalue(infectiousness, stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), "infectiousness") + (get_base1(obs_inc, i, "obs_inc", 1) * get_base1(w, (s - i), "w", 1))), 
                                "assigning variable infectiousness");
                }
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 28;
            validate_non_negative_index("R", "t", t);
            num_params_r__ += (1 * t);
            current_statement_begin__ = 29;
            validate_non_negative_index("phi", "neg_binom_model", neg_binom_model);
            num_params_r__ += (1 * neg_binom_model);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_epiestim() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 28;
        if (!(context__.contains_r("R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("R");
        pos__ = 0U;
        validate_non_negative_index("R", "t", t);
        context__.validate_dims("parameter initialization", "R", "double", context__.to_vec(t));
        std::vector<double> R(t, double(0));
        size_t R_k_0_max__ = t;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            R[k_0__] = vals_r__[pos__++];
        }
        size_t R_i_0_max__ = t;
        for (size_t i_0__ = 0; i_0__ < R_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, R[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable R: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 29;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "neg_binom_model", neg_binom_model);
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec(neg_binom_model));
        std::vector<double> phi(neg_binom_model, double(0));
        size_t phi_k_0_max__ = neg_binom_model;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            phi[k_0__] = vals_r__[pos__++];
        }
        size_t phi_i_0_max__ = neg_binom_model;
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 28;
            std::vector<local_scalar_t__> R;
            size_t R_d_0_max__ = t;
            R.reserve(R_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < R_d_0_max__; ++d_0__) {
                if (jacobian__)
                    R.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    R.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 29;
            std::vector<local_scalar_t__> phi;
            size_t phi_d_0_max__ = neg_binom_model;
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    phi.push_back(in__.scalar_lb_constrain(0));
            }
            // model body
            current_statement_begin__ = 34;
            if (as_bool(logical_eq(neg_binom_model, 1))) {
                current_statement_begin__ = 35;
                for (int s = (tau + 1); s <= t; ++s) {
                    current_statement_begin__ = 36;
                    for (int i = ((s - tau) + 1); i <= s; ++i) {
                        current_statement_begin__ = 37;
                        lp_accum__.add(neg_binomial_2_log(get_base1(obs_inc, i, "obs_inc", 1), (get_base1(R, s, "R", 1) * get_base1(infectiousness, i, "infectiousness", 1)), get_base1(phi, 1, "phi", 1)));
                    }
                }
            } else {
                current_statement_begin__ = 42;
                for (int s = (tau + 1); s <= t; ++s) {
                    current_statement_begin__ = 43;
                    for (int i = ((s - tau) + 1); i <= s; ++i) {
                        current_statement_begin__ = 44;
                        lp_accum__.add(poisson_log(get_base1(obs_inc, i, "obs_inc", 1), (get_base1(R, s, "R", 1) * get_base1(infectiousness, i, "infectiousness", 1))));
                    }
                }
            }
            current_statement_begin__ = 51;
            for (int i = 1; i <= t; ++i) {
                current_statement_begin__ = 52;
                lp_accum__.add(gamma_log<propto__>(get_base1(R, i, "R", 1), 0.15, 0.1));
            }
            current_statement_begin__ = 54;
            lp_accum__.add(gamma_log<propto__>(phi, 0.05, 0.05));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("R");
        names__.push_back("phi");
        names__.push_back("phi_prior");
        names__.push_back("R_prior");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(neg_binom_model);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_epiestim_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> R;
        size_t R_d_0_max__ = t;
        R.reserve(R_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < R_d_0_max__; ++d_0__) {
            R.push_back(in__.scalar_lb_constrain(0));
        }
        size_t R_k_0_max__ = t;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            vars__.push_back(R[k_0__]);
        }
        std::vector<double> phi;
        size_t phi_d_0_max__ = neg_binom_model;
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.scalar_lb_constrain(0));
        }
        size_t phi_k_0_max__ = neg_binom_model;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 58;
            double phi_prior;
            (void) phi_prior;  // dummy to suppress unused var warning
            stan::math::initialize(phi_prior, DUMMY_VAR__);
            stan::math::fill(phi_prior, DUMMY_VAR__);
            current_statement_begin__ = 59;
            double R_prior;
            (void) R_prior;  // dummy to suppress unused var warning
            stan::math::initialize(R_prior, DUMMY_VAR__);
            stan::math::fill(R_prior, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 62;
            stan::math::assign(phi_prior, gamma_rng(0.05, 0.05, base_rng__));
            current_statement_begin__ = 63;
            stan::math::assign(R_prior, gamma_rng(0.15, 0.1, base_rng__));
            // validate, write generated quantities
            current_statement_begin__ = 58;
            vars__.push_back(phi_prior);
            current_statement_begin__ = 59;
            vars__.push_back(R_prior);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_epiestim";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t R_k_0_max__ = t;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = neg_binom_model;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi_prior";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "R_prior";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t R_k_0_max__ = t;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = neg_binom_model;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi_prior";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "R_prior";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_epiestim_namespace::model_epiestim stan_model;
#endif
